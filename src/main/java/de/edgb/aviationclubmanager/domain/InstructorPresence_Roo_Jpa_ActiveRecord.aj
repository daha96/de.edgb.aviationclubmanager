// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.edgb.aviationclubmanager.domain;

import de.edgb.aviationclubmanager.domain.InstructorPresence;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect InstructorPresence_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager InstructorPresence.entityManager;
    
    public static final EntityManager InstructorPresence.entityManager() {
        EntityManager em = new InstructorPresence().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long InstructorPresence.countInstructorPresences() {
        return entityManager().createQuery("SELECT COUNT(o) FROM InstructorPresence o", Long.class).getSingleResult();
    }
    
    public static InstructorPresence InstructorPresence.findInstructorPresence(Long id) {
        if (id == null) return null;
        return entityManager().find(InstructorPresence.class, id);
    }
    
    @Transactional
    public void InstructorPresence.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void InstructorPresence.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            InstructorPresence attached = InstructorPresence.findInstructorPresence(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void InstructorPresence.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void InstructorPresence.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public InstructorPresence InstructorPresence.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        InstructorPresence merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
